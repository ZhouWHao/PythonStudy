#!/usr/bin/env python
'''
12.2 self
类的方法与普通的函数只有一个特别的区别—— 它们必须有一个额外的第一个
参数名称，但是在调用这个方法的时候你不为这个参数赋值，Python 会提供这个值。
这个特别的变量指对象本身，按照惯例它的名称是self。
虽然你可以给这个参数任何名称，但是强烈建议你使用self 这个名称—— 其他
名称都是不赞成你使用的。使用一个标准的名称有很多优点—— 你的程序读者可以
迅速识别它，如果使用self 的话，还有些IDE（集成开发环境）也可以帮助你。
给C++/Java/C# 程序员的注释：
Python 中的self 等价于C++ 中的self 指针和Java、C# 中的this 参考。
你一定很奇怪Python 如何给self 赋值以及为何你不需要给它赋值。举一个例子
会使此变得清晰。假如你有一个类称为MyClass 和这个类的一个实例MyObject。当
你调用这个对象的方法MyObject.method(arg1, arg2) 的时候，这会由Python 自动转为
MyClass.method(MyObject, arg1, arg2)—— 这就是self 的原理了。
这也意味着如果你有一个不需要参数的方法，你还是得给这个方法定义一个self
参数。
'''
class Person:
    pass
p = Person()
print(p)
#输出的<__main__.Person object at 0x038A55B0>告诉我们，这个对象实例存储在__main__ 模块中，并且位于我们的计算机地址0x038A55B0
'''
它如何工作:
我们使用class 语句后跟类名，创建了一个新的类。这后面跟着一个缩进的语句
块形成类体。在这个例子中，我们使用了一个空白块，它由pass 语句表示。
接下来，我们使用类名后跟一对圆括号来创建一个对象/实例。（我们将在下面的
章节中学习更多的如何创建实例的方法）。为了验证，我们简单地打印了这个变量的
类型。它告诉我们我们已经在__main__ 模块中有了一个Person 类的实例。
可以注意到存储对象的计算机内存地址也打印了出来。这个地址在你的计算机上
会是另外一个值，因为Python 可以在任何空位存储对象。
'''
